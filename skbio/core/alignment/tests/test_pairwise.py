# ----------------------------------------------------------------------------
# Copyright (c) 2013--, scikit-bio development team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function

from unittest import TestCase, main
from warnings import filterwarnings

import numpy as np

from skbio import (
    global_pairwise_align_protein, local_pairwise_align_protein,
    global_pairwise_align_nucleotide, local_pairwise_align_nucleotide,
    Alignment, Protein, DNA, RNA)
from skbio.core.alignment.pairwise import (
    _make_nt_substitution_matrix, _init_matrices_sw, _init_matrices_nw)

filterwarnings("ignore")


class PairwiseAlignmentTests(TestCase):
    """
        Note: In the high-level tests, the expected results were derived with
        assistance from the EMBOSS web server:
        http://www.ebi.ac.uk/Tools/psa/emboss_needle/
        http://www.ebi.ac.uk/Tools/psa/emboss_water/
        In some cases, placement of non-gap characters surrounded by gap
        characters are slighly different between scikit-bio and the EMBOSS
        server. These differences arise from arbitrary implementation
        differences, and always result in the same score (which tells us that
        the alignments are equivalent). In cases where the expected results
        included here differ from those generated by the EMBOSS server, I note
        the EMBOSS result as a comment below the expected value.

    """

    def test_make_nt_substitution_matrix(self):
        expected = {'A': {'A':  1, 'C': -2, 'G': -2, 'T': -2},
                    'C': {'A': -2, 'C':  1, 'G': -2, 'T': -2},
                    'G': {'A': -2, 'C': -2, 'G':  1, 'T': -2},
                    'T': {'A': -2, 'C': -2, 'G': -2, 'T':  1}}
        self.assertEqual(_make_nt_substitution_matrix(1, -2), expected)

        expected = {'A': {'A':  5, 'C': -4, 'G': -4, 'T': -4},
                    'C': {'A': -4, 'C':  5, 'G': -4, 'T': -4},
                    'G': {'A': -4, 'C': -4, 'G':  5, 'T': -4},
                    'T': {'A': -4, 'C': -4, 'G': -4, 'T':  5}}
        self.assertEqual(_make_nt_substitution_matrix(5, -4), expected)

    def test_global_pairwise_align_protein(self):
        expected = ("HEAGAWGHEE", "---PAWHEAE", 1.0)
        actual = global_pairwise_align_protein("HEAGAWGHEE", "PAWHEAE",
                                               gap_open_penalty=10.,
                                               gap_extend_penalty=5.)
        self.assertEqual(str(actual[0]), expected[0])
        self.assertEqual(str(actual[1]), expected[1])
        self.assertEqual(actual.score(), expected[2])
        self.assertEqual(actual.start_end_positions(), [(0, 9), (0, 6)])

        expected = ("HEAGAWGHE-E", "---PAW-HEAE", 24.0)
        # EMBOSS result: P---AW-HEAE
        actual = global_pairwise_align_protein("HEAGAWGHEE", "PAWHEAE",
                                               gap_open_penalty=5.,
                                               gap_extend_penalty=0.5)
        self.assertEqual(str(actual[0]), expected[0])
        self.assertEqual(str(actual[1]), expected[1])
        self.assertEqual(actual.score(), expected[2])
        self.assertEqual(actual.start_end_positions(), [(0, 9), (0, 6)])

        # Protein (rather than str) as input
        expected = ("HEAGAWGHEE", "---PAWHEAE", 1.0)
        actual = global_pairwise_align_protein(Protein("HEAGAWGHEE"),
                                               Protein("PAWHEAE"),
                                               gap_open_penalty=10.,
                                               gap_extend_penalty=5.)
        self.assertEqual(str(actual[0]), expected[0])
        self.assertEqual(str(actual[1]), expected[1])
        self.assertEqual(actual.score(), expected[2])
        self.assertEqual(actual.start_end_positions(), [(0, 9), (0, 6)])

    def test_local_pairwise_align_protein(self):
        expected = ("AWGHE", "AW-HE", 26.0, 4, 1)
        actual = local_pairwise_align_protein("HEAGAWGHEE", "PAWHEAE",
                                              gap_open_penalty=10.,
                                              gap_extend_penalty=5.)
        self.assertEqual(str(actual[0]), expected[0])
        self.assertEqual(str(actual[1]), expected[1])
        self.assertEqual(actual.score(), expected[2])
        self.assertEqual(actual.start_end_positions(), [(4, 8), (1, 4)])

        expected = ("AWGHE-E", "AW-HEAE", 32.0, 4, 1)
        actual = local_pairwise_align_protein("HEAGAWGHEE", "PAWHEAE",
                                              gap_open_penalty=5.,
                                              gap_extend_penalty=0.5)
        self.assertEqual(str(actual[0]), expected[0])
        self.assertEqual(str(actual[1]), expected[1])
        self.assertEqual(actual.score(), expected[2])
        self.assertEqual(actual.start_end_positions(), [(4, 9), (1, 6)])
        expected = ("AWGHE", "AW-HE", 26.0, 4, 1)

        # Protein (rather than str) as input
        actual = local_pairwise_align_protein(Protein("HEAGAWGHEE"),
                                              Protein("PAWHEAE"),
                                              gap_open_penalty=10.,
                                              gap_extend_penalty=5.)
        self.assertEqual(str(actual[0]), expected[0])
        self.assertEqual(str(actual[1]), expected[1])
        self.assertEqual(actual.score(), expected[2])
        self.assertEqual(actual.start_end_positions(), [(4, 8), (1, 4)])

    def test_global_pairwise_align_nucleotide(self):
        m = _make_nt_substitution_matrix(5, -4)
        expected = ("G-ACCTTGACCAGGTACC", "GAACTTTGAC---GTAAC", 41.0, 0, 0)
        actual = global_pairwise_align_nucleotide("GACCTTGACCAGGTACC",
                                                  "GAACTTTGACGTAAC",
                                                  gap_open_penalty=5.,
                                                  gap_extend_penalty=0.5,
                                                  substitution_matrix=m)
        self.assertEqual(str(actual[0]), expected[0])
        self.assertEqual(str(actual[1]), expected[1])
        self.assertEqual(actual.score(), expected[2])
        self.assertEqual(actual.start_end_positions(), [(0, 16), (0, 14)])

        expected = ("G-ACCTTGACCAGGTACC", "GAACTTTGAC---GTAAC", 31.0, 0, 0)
        actual = global_pairwise_align_nucleotide("GACCTTGACCAGGTACC",
                                                  "GAACTTTGACGTAAC",
                                                  gap_open_penalty=10.,
                                                  gap_extend_penalty=0.5,
                                                  substitution_matrix=m)
        self.assertEqual(str(actual[0]), expected[0])
        self.assertEqual(str(actual[1]), expected[1])
        self.assertEqual(actual.score(), expected[2])
        self.assertEqual(actual.start_end_positions(), [(0, 16), (0, 14)])

        # DNA (rather than str) as input
        expected = ("G-ACCTTGACCAGGTACC", "GAACTTTGAC---GTAAC", 31.0, 0, 0)
        actual = global_pairwise_align_nucleotide(DNA("GACCTTGACCAGGTACC"),
                                                  DNA("GAACTTTGACGTAAC"),
                                                  gap_open_penalty=10.,
                                                  gap_extend_penalty=0.5,
                                                  substitution_matrix=m)
        self.assertEqual(str(actual[0]), expected[0])
        self.assertEqual(str(actual[1]), expected[1])
        self.assertEqual(actual.score(), expected[2])
        self.assertEqual(actual.start_end_positions(), [(0, 16), (0, 14)])

    def test_local_pairwise_align_nucleotide(self):
        m = _make_nt_substitution_matrix(5, -4)
        expected = ("ACCTTGACCAGGTACC", "ACTTTGAC---GTAAC", 41.0, 1, 2)
        actual = local_pairwise_align_nucleotide("GACCTTGACCAGGTACC",
                                                 "GAACTTTGACGTAAC",
                                                 gap_open_penalty=5.,
                                                 gap_extend_penalty=0.5,
                                                 substitution_matrix=m)
        self.assertEqual(str(actual[0]), expected[0])
        self.assertEqual(str(actual[1]), expected[1])
        self.assertEqual(actual.score(), expected[2])
        self.assertEqual(actual.start_end_positions(), [(1, 16), (2, 14)])

        expected = ("ACCTTGAC", "ACTTTGAC", 31.0, 1, 2)
        actual = local_pairwise_align_nucleotide("GACCTTGACCAGGTACC",
                                                 "GAACTTTGACGTAAC",
                                                 gap_open_penalty=10.,
                                                 gap_extend_penalty=5.,
                                                 substitution_matrix=m)
        self.assertEqual(str(actual[0]), expected[0])
        self.assertEqual(str(actual[1]), expected[1])
        self.assertEqual(actual.score(), expected[2])
        self.assertEqual(actual.start_end_positions(), [(1, 8), (2, 9)])

        # DNA (rather than str) as input
        expected = ("ACCTTGAC", "ACTTTGAC", 31.0, 1, 2)
        actual = local_pairwise_align_nucleotide(DNA("GACCTTGACCAGGTACC"),
                                                 DNA("GAACTTTGACGTAAC"),
                                                 gap_open_penalty=10.,
                                                 gap_extend_penalty=5.,
                                                 substitution_matrix=m)
        self.assertEqual(str(actual[0]), expected[0])
        self.assertEqual(str(actual[1]), expected[1])
        self.assertEqual(actual.score(), expected[2])
        self.assertEqual(actual.start_end_positions(), [(1, 8), (2, 9)])

    def test_init_matrices_sw(self):
        expected_score_m = np.zeros((5, 4))
        expected_tback_m = np.zeros((5, 4)) - 1
        expected_tback_m[0, 0] = 0
        actual_score_m, actual_tback_m = _init_matrices_sw('AAA', 'AAAA', 5, 2)
        np.testing.assert_array_equal(actual_score_m, expected_score_m)
        np.testing.assert_array_equal(actual_tback_m, expected_tback_m)

    def test_init_matrices_nw(self):
        expected_score_m = [[0, -5, -7, -9],
                            [-5, 0, 0, 0],
                            [-7, 0, 0, 0],
                            [-9, 0, 0, 0],
                            [-11, 0, 0, 0]]
        expected_tback_m = [[0, 3, 3, 3],
                            [2, -1, -1, -1],
                            [2, -1, -1, -1],
                            [2, -1, -1, -1],
                            [2, -1, -1, -1]]
        actual_score_m, actual_tback_m = _init_matrices_nw('AAA', 'AAAA', 5, 2)
        np.testing.assert_array_equal(actual_score_m, expected_score_m)
        np.testing.assert_array_equal(actual_tback_m, expected_tback_m)

if __name__ == "__main__":
    main()
